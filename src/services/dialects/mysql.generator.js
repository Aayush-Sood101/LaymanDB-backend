/**
 * MySQL SQL generator
 */

/**
 * Generate a header comment for the SQL script
 * @param {Object} schema - Database schema
 * @returns {string} - Header comment
 */
exports.headerComment = (schema) => {
  return `-- MySQL Script Generated for Schema: ${schema.name}
-- Created: ${new Date().toISOString()}
-- Description: ${schema.description || 'Database schema generated by Database Creator tool'}

SET FOREIGN_KEY_CHECKS=0;`;
};

/**
 * Generate CREATE TABLE statement for MySQL
 * @param {Object} table - Table object
 * @param {Object} schema - Full schema
 * @returns {string} - CREATE TABLE statement
 */
exports.createTableStatement = (table, schema) => {
  const columnDefinitions = table.columns.map(column => {
    let definition = `\`${column.name}\` ${column.dataType}`;
    
    if (column.isNullable === false) {
      definition += ' NOT NULL';
    }
    
    if (column.defaultValue) {
      definition += ` DEFAULT ${formatDefaultValue(column.defaultValue)}`;
    }
    
    if (column.isUnique && !column.isPrimaryKey) {
      definition += ' UNIQUE';
    }
    
    if (column.isPrimaryKey) {
      definition += ' PRIMARY KEY';
    }
    
    if (column.isForeignKey && column.references) {
      definition += ` REFERENCES \`${column.references.table}\`(\`${column.references.column}\`)`;
      
      if (column.references.onDelete) {
        definition += ` ON DELETE ${column.references.onDelete}`;
      }
      
      if (column.references.onUpdate) {
        definition += ` ON UPDATE ${column.references.onUpdate}`;
      }
    }
    
    if (column.description) {
      definition += ` COMMENT '${column.description.replace(/'/g, "''")}'`;
    }
    
    return definition;
  });
  
  // Handle composite primary keys
  const primaryKeyColumns = table.columns.filter(column => column.isPrimaryKey);
  if (primaryKeyColumns.length > 1) {
    const pkDefinition = `PRIMARY KEY (${primaryKeyColumns.map(col => `\`${col.name}\``).join(', ')})`;
    columnDefinitions.push(pkDefinition);
  }
  
  return `-- Table: ${table.name}
CREATE TABLE IF NOT EXISTS \`${table.name}\` (
  ${columnDefinitions.join(',\n  ')}
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;`;
};

/**
 * Generate CREATE INDEX statements for MySQL
 * @param {Object} table - Table object
 * @param {Object} schema - Full schema
 * @returns {Array} - CREATE INDEX statements
 */
exports.createIndexStatements = (table, schema) => {
  const indexes = [];
  
  // Add indexes for foreign keys
  const foreignKeyColumns = table.columns.filter(column => column.isForeignKey);
  
  foreignKeyColumns.forEach(column => {
    indexes.push(`-- Index for foreign key: ${column.name}
CREATE INDEX \`idx_${table.name}_${column.name}\` ON \`${table.name}\` (\`${column.name}\`);`);
  });
  
  return indexes;
};

/**
 * Generate ALTER TABLE statement for adding foreign key
 * @param {string} tableName - Table name
 * @param {Object} foreignKey - Foreign key constraint
 * @returns {string} - ALTER TABLE statement
 */
exports.addForeignKeyStatement = (tableName, foreignKey) => {
  return `ALTER TABLE \`${tableName}\`
ADD CONSTRAINT \`fk_${tableName}_${foreignKey.columnName}\`
FOREIGN KEY (\`${foreignKey.columnName}\`)
REFERENCES \`${foreignKey.referenceTable}\`(\`${foreignKey.referenceColumn}\`)
ON DELETE ${foreignKey.onDelete}
ON UPDATE ${foreignKey.onUpdate};`;
};

/**
 * Format default value for MySQL
 * @param {string} value - Default value
 * @returns {string} - Formatted default value
 */
function formatDefaultValue(value) {
  if (value === 'CURRENT_TIMESTAMP' || value === 'NULL') {
    return value;
  }
  return `'${value}'`;
}

module.exports = exports;
